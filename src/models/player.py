from abc import ABC, abstractmethod
from typing import final

from langchain.chat_models.base import BaseChatModel
from langchain_core.messages import AIMessage, BaseMessage, HumanMessage, SystemMessage

from models.errors import InvalidOutputLLMError


class Player(ABC):
    """Abstract base class representing a player capable of answering questions."""

    @abstractmethod
    def answer(self, question: str) -> str:
        """
        Returns an answer to the given question.

        Args:
            question (str): The question to be answered.

        Returns:
            str: The player's answer.

        """


@final
class LangChainPlayer(Player):
    """
    Player implementation that uses a LangChain model to generate answers.

    Attributes:
        __memory (list[BaseMessage]): The message history including system prompt,
            user questions, and model responses.
        __model (BaseChatModel): The LangChain-compatible model used for generating responses.

    """

    __slots__ = ("_memory", "_model")

    def __init__(self, model: BaseChatModel, system_prompt: str) -> None:
        """
        Initializes LangChainPlayer with a model and a system prompt.

        Args:
            model (BaseChatModel): A LangChain-compatible chat model.
            system_prompt (str): A system message defining model behavior.

        """
        self._model = model
        self._memory: list[BaseMessage] = [SystemMessage(system_prompt)]

    def answer(self, question: str) -> str:
        """
        Generates an answer to the question using the message history.

        Args:
            question (str): A question asked by the user.

        Returns:
            str: The answer generated by the model.

        Raises:
            InvalidOutputLLMError: If the model's output is not a string.

        """
        self._memory.append(HumanMessage(question))
        message = self._model.invoke(self._memory)
        if not isinstance(message.content, str):
            raise InvalidOutputLLMError

        self._memory.append(AIMessage(message.content))
        return message.content
